# Policy di Rete per Isolamento Multi-Tenant

# =============================================================================
# POLICY DEFAULT DENY ALL
# =============================================================================

# Namespace Frontend: Blocca tutto di default
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector: {}  # tutti i pod
  policyTypes:
  - Ingress
  - Egress

# Namespace Backend: Blocca tutto di default  
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

# Namespace Platform: Nessuna restrizione

# =============================================================================
# COMUNICAZIONE INTRA-NAMESPACE
# =============================================================================

# Frontend: comunicazione stesso namespace
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: frontend
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          team: frontend

# Backend: comunicazione stesso namespace
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: backend
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          team: backend

# =============================================================================
# RISOLUZIONE DNS
# =============================================================================

# Frontend: query DNS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # DNS di Kubernetes (CoreDNS in kube-system)
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # DNS esterni (fallback)
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

# Backend: query DNS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

# =============================================================================
# ACCESSO DATABASE
# =============================================================================

# Backend: accesso PostgreSQL (ora ridondante)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-database
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # PostgreSQL
  - to: []
    ports:
    - protocol: TCP
      port: 5432

# =============================================================================
# MONITORING DEL PLATFORM TEAM
# =============================================================================

# Frontend: permetti monitoring dal platform team
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-platform-monitoring
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector:
    matchLabels:
      monitoring: "enabled"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: platform  # Solo dal namespace platform
    ports:
    - protocol: TCP # Grafana port
      port: 3000    
    - protocol: TCP
      port: 8080    # metrics port
    - protocol: TCP
      port: 9090    # Prometheus metrics

# Backend: permetti monitoring dal platform team
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-platform-monitoring
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector:
    matchLabels:
      monitoring: "enabled"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: platform  # Solo dal namespace platform
    ports:
    - protocol: TCP
      port: 3000    # Porta API backend
    - protocol: TCP
      port: 8080    # Porta metriche
    - protocol: TCP
      port: 9090    # Prometheus metrics

# =============================================================================
# ACCESSO INTERNET
# =============================================================================

# Frontend: accesso internet controllato
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-internet-egress
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP

# Backend: accesso internet restrittivo
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-internet-egress
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # Solo HTTPS

# =============================================================================
# ACCESSO API KUBERNETES
# =============================================================================

# Frontend: accesso API Kubernetes
# non ho fatto demo ma tipo : 
# kubectl exec -n team-frontend pod -- kubectl get pods
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kubernetes-api
  namespace: team-frontend
  labels:
    team: frontend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 6443  # API Kubernetes
    - protocol: TCP
      port: 443   # API Kubernetes (alternativa)

# Backend: accesso API Kubernetes
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kubernetes-api
  namespace: team-backend
  labels:
    team: backend
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 6443
    - protocol: TCP
      port: 443


# Policy ingress (non funziona)
# Browser -> nginx-ingress -> react-store pod
# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-ingress-to-frontend
#   namespace: team-frontend
# spec:
#   podSelector:
#     matchLabels:
#       app: react-store
#   policyTypes:
#   - Ingress                
#   ingress:
#   - from:
#     - namespaceSelector:
#         matchLabels:
#           name: ingress-nginx
#     ports:
#     - protocol: TCP
#       port: 3000            # Porta React server
  
  
# Browser -> nginx-ingress -> users-api pod
# Con questa possiamo fare fetch('/api/products') da react
# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-ingress-to-backend
#   namespace: team-backend
# spec:
#   podSelector:
#     matchLabels:
#       app: users-api
#   policyTypes:
#   - Ingress
#   ingress:
#   - from:
#     - namespaceSelector:
#         matchLabels:
#           name: ingress-nginx
#     ports:
#     - protocol: TCP
#    port: 3000            # Porta API Node.js