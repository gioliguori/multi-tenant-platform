# Network Policies per Isolamento Multi-Tenant

# =============================================================================
# DEFAULT DENY ALL POLICIES (Security by Default)
# =============================================================================

# Frontend Namespace: Default Deny All
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: default-deny
    setup-step: "step-6"
  annotations:
    description: "Default deny all ingress and egress traffic for security"
    created-by: "multi-tenant-setup"
spec:
  podSelector: {}  # all pods
  policyTypes:
  - Ingress
  - Egress

# Backend Namespace: Default Deny All  
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: default-deny
    setup-step: "step-6"
  annotations:
    description: "Default deny all ingress and egress traffic for security"
    created-by: "multi-tenant-setup"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

# Platform Namespace: No restrictions

# =============================================================================
# INTRA-NAMESPACE COMMUNICATION
# =============================================================================

# Frontend: same namespace communication
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: intra-namespace-allow
    setup-step: "step-6"
  annotations:
    description: "Allow pods within team-frontend to communicate with each other"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: frontend
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          team: frontend

# Backend: same namespace communication
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: intra-namespace-allow
    setup-step: "step-6"
  annotations:
    description: "Allow pods within team-backend to communicate with each other"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: backend
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          team: backend

# =============================================================================
# DNS RESOLUTION
# =============================================================================

# Frontend: DNS queries
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: dns-allow
    setup-step: "step-6"
  annotations:
    description: "Allow DNS queries to kube-system for service discovery"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

# Backend: DNS queries
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: dns-allow
    setup-step: "step-6"
  annotations:
    description: "Allow DNS queries to kube-system for service discovery"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

# =============================================================================
# EXTERNAL DATABASE
# =============================================================================

# Backend
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-database
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: external-database-access
    setup-step: "step-6-external-db"
  annotations:
    description: "Allow backend pods to access external PostgreSQL database"
    database-host: "172.20.20.15:5432"
    network-path: "pod → management-network → containerlab → external-db"
    created-by: "multi-tenant-setup-external-db"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432
  - to: []

# =============================================================================
# PLATFORM TEAM MONITORING
# =============================================================================

# Allow Platform team to monitor Frontend namespace
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-platform-monitoring
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: platform-monitoring
    setup-step: "step-6"
  annotations:
    description: "Allow platform team to monitor frontend namespace for observability"
spec:
  podSelector:
    matchLabels:
      monitoring: "enabled"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: platform
    ports:
    - protocol: TCP
      port: 8080    # Common metrics port
    - protocol: TCP
      port: 9090    # Prometheus metrics port
    - protocol: TCP
      port: 9091    # Pushgateway port
    - protocol: TCP
      port: 3000    # Grafana port

# Allow Platform team to monitor Backend namespace
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-platform-monitoring
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: platform-monitoring
    setup-step: "step-6"
  annotations:
    description: "Allow platform team to monitor backend namespace for observability"
spec:
  podSelector:
    matchLabels:
      monitoring: "enabled"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          team: platform
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9091
    - protocol: TCP
      port: 3000

# Frontend: Allow controlled internet access
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-internet-egress
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: internet-egress
    setup-step: "step-6"
  annotations:
    description: "Allow controlled internet access for frontend applications"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # Allow HTTPS
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP
  - to: []
    ports:
    - protocol: TCP
      port: 80

# Backend: More restrictive internet access
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-internet-egress
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: internet-egress
    setup-step: "step-6"
  annotations:
    description: "Restrictive internet access for backend services"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # Only HTTPS
  - to: []
    ports:
    - protocol: TCP
      port: 443

# =============================================================================
# KUBERNETES API ACCESS
# =============================================================================

# Allow access to Kubernetes API server
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kubernetes-api
  namespace: team-frontend
  labels:
    team: frontend
    component: network-security
    policy-type: k8s-api-access
    setup-step: "step-6"
  annotations:
    description: "Allow access to Kubernetes API server"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 6443
    - protocol: TCP
      port: 443

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kubernetes-api
  namespace: team-backend
  labels:
    team: backend
    component: network-security
    policy-type: k8s-api-access
    setup-step: "step-6"
  annotations:
    description: "Allow access to Kubernetes API server"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 6443
    - protocol: TCP
      port: 443